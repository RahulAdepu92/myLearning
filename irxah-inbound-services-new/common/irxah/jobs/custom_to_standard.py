from ..common import (
    get_pos,
    format_string,
    trim_and_combine_values,    # Note: Do not remove below lines as they are used by Custom functions
    get_current_date_in_format,
    convert_date_format,
    get_earlier_date,
)


def generate_standard_row(
    row_type: str,
    header_row: str,
    custom_row: str,
    mapping_data: list,
    line_num: str,
    batch_number: int,
) -> str:
    """Function to generate the standard row out of custom row based on mapping information
    :param row_type: Specifies the row type, whether it is 'Header' or 'Footer' or 'Detail'
    :param header_row: Holds the value of standard header row
    :param custom_row: Holds the value of custom row
    :param mapping_data: Mapping date list from thecustom_to_standard_mapping table
    :param line_num: Holds the custom file line number
    :param batch_number: Holds the retrieved batch number value
    :return: string, the standard row
    """
    standard_row = ""
    for mapping in mapping_data:
        standard_value = ""
        # format character is default to spaces
        format_char = " "
        if mapping.row_type == row_type:
            standard_value = get_data_based_on_conversion_type(
                header_row, custom_row, mapping, line_num, batch_number
            )
            if mapping.conversion_type == "FILL_WITH_THIS_VALUE":
                format_char = mapping.dest_col_value
            standard_row += format_string(standard_value, mapping.dest_col_length, format_char, "<")
    return standard_row


def get_data_based_on_conversion_type(
    header_row: str, custom_row: str, mapping: list, line_num: str, batch_number: int
) -> str:
    """Function to get the data based on conversion type specified
        conversion_type: COPY_AS_IS - returns the value from the custom_row in the specified position (mapping.src_col_position)
        conversion_type: REPLACE - returns value specified in the table (mapping.dest_col_value)
        conversion_type: CUSTOM - calls the custon function and returns the value
    :param header_row: Holds the value of standard header row
    :parm custom_row: Holds the value of custom file row
    :param mapping: mapping row from the table
    :param line_num: Holds the line numner from custom file
    :param batch_number: Holds the retrieved batch number value
    :return: string, the standard value
    """
    custom_value = ""
    if mapping.src_col_position:
        (start, end) = get_pos(mapping.src_col_position)
        custom_value = custom_row[(start - 1) : end]
    else:
        custom_value = ""
    if mapping.conversion_type == "COPY_AS_IS":
        return custom_value
    if mapping.conversion_type == "REPLACE":
        return mapping.dest_col_value
    if mapping.conversion_type == "CUSTOM":
        return eval(mapping.conversion_formula_id)
    return ""


def _transform_values(key_value_dict: dict, key: str, def_value: str) -> str:
    """Function to transform values from the input dictionary
    :param key_value_dict: Holds the key valu pair of input data
    :param key: input key value to which we need a value
    :param def_value: default value to be returned if the dict is None or if the dict has not the key
    :return: string value, the evalue of the goven key
    """
    return str(key_value_dict.get(key, def_value))


def _get_lower_amount(amount: str, max_value: int, def_value: int) -> str:
    """Function to get the lesser amount from the given input and
    it returns the default value if the amount is larger than max_value.
    :param amount: The input value to be compared with maximum value
    :param max_value: The maximum value
    :param def_value: the value to be returned in case if the given value exceeds the max_value
    :return: string, the lower amount or the default value if is is more than max value
    """
    if int(amount) > max_value:
        return str(def_value)
    return str(int(amount))


def _get_patient_id(contract_id: str, max_length: int, def_value: str) -> str:
    """Function to get the patient id from contract id after validating the length
    it returns the default value if the length of contract_id is greater than max_length.
    Issue: The Patient ID ( 20 character long)  in NCPDP Layout is generated by the Contract ID (25 characters in custom )
    ,but patient ID is limited to 20 characters only. To handle this scenario, if we receive Contract ID as more than 20 bytes,
    then Patient ID is populated as all '9s' (99999999999999999999). it will be considered as level 1 error

    :param contract_id: The input value(contract_id) to be validated for max_length
    :param max_length: Expected max length
    :param def_value: the value to be returned in case if the given value exceeds the max_length
    :return: string, trimmed contract id or the default value 9s of 20 bytes) if is is greater than max_length
    """
    if contract_id:
        if len(contract_id.strip()) > max_length:
            return def_value * max_length
        return contract_id.strip()
    return " "
